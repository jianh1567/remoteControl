package com.wind.control.activity.load;import android.os.Bundle;import android.os.CountDownTimer;import android.text.InputType;import android.text.TextUtils;import android.view.View;import android.widget.Button;import android.widget.CheckBox;import android.widget.CompoundButton;import android.widget.EditText;import android.widget.ImageView;import com.google.gson.Gson;import com.wind.control.R;import com.wind.control.base.BaseActivity;import com.wind.control.model.HttpResponse;import com.wind.control.okhttp.OkHttpUtils;import com.wind.control.okhttp.api.Api;import com.wind.control.okhttp.callback.GenericsCallback;import com.wind.control.okhttp.service.GetCodeRequest;import com.wind.control.okhttp.service.RegisterRequest;import com.wind.control.util.BaseInfoSPUtil;import com.wind.control.util.CheckUtils;import com.wind.control.util.JsonGenericsSerializator;import com.wind.control.util.NetUtil;import butterknife.BindView;import butterknife.OnClick;import okhttp3.Call;/** * 作者：Created by luow on 2018/7/2 * 注释：注册界面 */public class RegisterActivity extends BaseActivity {    @BindView(R.id.iv_left)    ImageView mIvLeft;    @BindView(R.id.et_phone)    EditText mEtPhone;    @BindView(R.id.et_code)    EditText mEtCode;    @BindView(R.id.btn_code)    Button mBtnCode;    @BindView(R.id.et_pwd)    EditText mEtPwd;    @BindView(R.id.cb_pwd)    CheckBox mCbPwd;    @BindView(R.id.et_once_pwd)    EditText mEtOncePwd;    @BindView(R.id.cb_one_pwd)    CheckBox mCbOnePwd;    @BindView(R.id.btn_register)    Button mBtnRegister;    private String mPhoneNum;    private String mCode;    private String mPwd;    private String mOncePwd;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_register);        initListener();    }    @OnClick({R.id.iv_left, R.id.btn_code, R.id.btn_register})    public void onClick(View view) {        hideInputMethod();        switch (view.getId()) {            case R.id.iv_left:                onBackPressed();                break;            case R.id.btn_code:                prepGetVerifyCode();                break;            case R.id.btn_register:                mPhoneNum = mEtPhone.getText().toString();                mCode = mEtCode.getText().toString();                mPwd = mEtPwd.getText().toString();                mOncePwd = mEtOncePwd.getText().toString();                if (TextUtils.isEmpty(mPhoneNum)) {                    showToast(getString(R.string.et_input_phone));                } else if (!CheckUtils.isPhoneNum(mPhoneNum)) {                    showToast(getString(R.string.txt_error_phone_num));                } else if (TextUtils.isEmpty(mCode)) {                    showToast(getString(R.string.txt_input_code));                } else if (TextUtils.isEmpty(mEtPwd.getText().toString())) {                    showToast(getString(R.string.input_pwd_hint));                } else if (!CheckUtils.isPassword(mEtPwd.getText().toString())) {                    showToast(getString(R.string.txt_error_pwd));                } else if (TextUtils.isEmpty(mEtOncePwd.getText().toString())) {                    showToast(getString(R.string.input_pwd_hint));                } else if (!mEtOncePwd.getText().toString().equals(mEtPwd.getText().toString())) {                    showToast(getString(R.string.txt_pwd_no));                } else {                    requestRegister();                }                break;        }    }    //EditText明文密文切换    private void initListener() {        mCbPwd.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {            @Override            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {                if (isChecked) {                    //选择状态 显示明文--设置为可见的密码                    mEtPwd.setInputType(InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD);                } else {                    //默认状态显示密码--设置文本 要一起写才能起作用 InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD                    mEtPwd.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);                }            }        });        mCbOnePwd.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {            @Override            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {                if (isChecked) {                    //选择状态 显示明文--设置为可见的密码                    mEtOncePwd.setInputType(InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD);                } else {                    //默认状态显示密码--设置文本 要一起写才能起作用 InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD                    mEtOncePwd.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);                }            }        });    }    //倒计时相关    private void prepGetVerifyCode() {        mPhoneNum = mEtPhone.getText().toString();        if (TextUtils.isEmpty(mPhoneNum)) {            showToast(getString(R.string.et_input_phone));        } else if (!CheckUtils.isPhoneNum(mPhoneNum)) {            showToast(getString(R.string.txt_error_phone_num));        } else {            mBtnCode.setEnabled(false);            CountDownTimer timer = new CountDownTimer(60000, 1000) {                @Override                public void onTick(long millisUntilFinished) {                    mBtnCode.setText("重新发送" + "(" + millisUntilFinished / 1000 + ")");                }                @Override                public void onFinish() {                    mBtnCode.setEnabled(true);                    mBtnCode.setText("获取验证码");                }            };            timer.start();            requestVerifyCode();        }    }    //----------------------------------------------网络相关----------------------------------------    /**     * 请求注册     **/    private void requestRegister() {        RegisterRequest bean = new RegisterRequest();        bean.setPhone(mPhoneNum);        bean.setCode(mCode);        bean.setPassword(mPwd);        OkHttpUtils.postString()                .url(Api.REGISTER)                .content(new Gson().toJson(bean))                .build()                .execute(new GenericsCallback<HttpResponse>(new JsonGenericsSerializator()) {                    @Override                    public void onError(Call call, Exception e, int id, int code) {                        if (!NetUtil.isNetworkAvailable(RegisterActivity.this)) {                            showToast(getResources().getString(R.string.isNetWork));                        }                    }                    @Override                    public void onResponse(HttpResponse response, int id, int code) {                        String mCode = response.getCode();                        if (mCode.equals("1000")) {                            showToast("注册成功");                            //存储用户手机号码                            BaseInfoSPUtil.getInstance().setUserPhoneNum(RegisterActivity.this, mPhoneNum);                            finish();                        }else{                            showToast(response.getMsg());                        }                    }                });    }    /**     * 发送验证码     **/    private void requestVerifyCode() {        GetCodeRequest bean = new GetCodeRequest();        bean.setPhone(mPhoneNum);      //  bean.setTarget("REGISTER");        OkHttpUtils.postString()                .url(Api.GET_PHONE_CODE)                .content(new Gson().toJson(bean))                .build()                .execute(new GenericsCallback<HttpResponse>(new JsonGenericsSerializator()) {                    @Override                    public void onError(Call call, Exception e, int id, int code) {                    }                    @Override                    public void onResponse(HttpResponse response, int id, int code) {                        String mCode = response.getCode();                        if (mCode.equals("1000")) {                            showToast("发送成功");                            mEtCode.setText(response.getMsg());                        }else{                            showToast(response.getMsg());                        }                    }                });    }}